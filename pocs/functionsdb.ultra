@{
createGen: 'conn', 'connection.gen'
&dbVars.CONN = 'conn'
lockGenPairs: 'conn', true
lockGenPairs: 'dbVars', true

function: typer, arg
    if: not(isNum(@arg))
        _: ~('"', @arg ,'"')
    else
        _: @arg
    endIf
endFunction

function: nextId, table
    DB>query: CONN, ~('select count(id) from ', @table), 'r'
    r = genValue('0:count(id)', 'r')
    unloadGen: 'r'
    return: ++(@r)
endFunction

proc:insert, conn, table, datagen
    for: range(keysCount(@datagen)), i
        key = genKeyByIndex(@datagen, @i)
        value = genValueByIndex(@datagen, @i)
        setValue: @datagen, @key, typer(@value)
    endFor
    ins = ~('INSERT INTO ', @table,' (id ,', +(', ', .@datagen),') VALUES ( ',nextId(@table),', ', +(', ', ..@datagen),')')
    DB>query: @conn, @ins
endProc

proc: createTable, conn, name, params
    v = map(+(',', ...@params),replace('=',' ',@elem))
    q = ~('CREATE TABLE ', @name,' (', @v,')')
    DB>query: @conn, @q
endProc

proc: all, table, results
    DB>query: CONN, ~('SELECT * FROM ', @table), @results    
endProc
}